<xml>
<done>
work on get tab's cancel button
	if sftp.sock.closed != True:
		sftp.put('localfile','remotefile')
	else:
		return False
add transfer transaction history via json logfile

add load last-transaction from history

change password fields to hide plaintext passwords

add desktop icon/notification system for progress

add a history viewer
	options
		clear history
		load history
	work on adding button functionality for 
		remove
		clear

add functionality that detects the size of the history.json log, and when it reaches a certain size is moved to a history-archives directory that is not read from by the application, and the history.json is truncated back to 2 bytes/characters; this check should be done at program startup, with a warning dialog letting the user know what is going on and where the data is being sent for future ference.

add functionality to updateTransfer{'Get','Send'} to generate a current transfer log to track exactly what files/dirs have been copied and save the save log to a transfer-logs directory

add a json file called statements.json with various phrases and keys that are retrieved whenever a print statement is called using a random phrase and random color

make a sha512 checksum of file before transfer and save to transfer log

make default-mode source/destination dirs set in config.json [libssh.py line 181,]

load config.json before anything else

do a progress counter for the checksumming of a file

*make config/default options available in config.json

add warning dialog for history viewer to warn user before clearing the history, allowing for a cancellation if necessary

need a simple icon/logo for scp-qt
add a dialog to configure config.json

create a dialog to generate ssh-keys for users on windows (pycryptodome from Crypto.PublicKey import RSA) -- look at code block below
<codeblock 
	from="https://stackoverflow.com/questions/2466401/how-to-generate-ssh-key-pairs-with-python" 
	doc="https://www.pycryptodome.org/en/latest/src/api.html">
from os import chmod
from Crypto.PublicKey import RSA
key = RSA.generate(2048)
with open("/tmp/private.key", 'w') as content_file:
    chmod("/tmp/private.key", 0600)
    content_file.write(key.exportKey('PEM'))
pubkey = key.publickey()
with open("/tmp/public.key", 'w') as content_file:
    content_file.write(pubkey.exportKey('OpenSSH'))
</codeblock>
need to add functionality to detect if keyfile is encrypted, and if so decrypt by prompt

</done>

<pending>
detect what os software is being run on
->create a drop-in replacement for engfmt so software can run on windows
	replacement component for engfmt might be engineering_notation.EngNumber(num,precision=prec)
	*need to test new module
remove unix specific paths for windows interoperability

ensure soft. can work on windows as wells as on linux [linux only is the current state] -- engfmt needs windows support, so a wrapper will need to be created

need more phrases for statements.db

add a method to lib/libconfigure.py to get supported image formats for PyQt5 icons

add a warning dialog to remove-entry in history dialog to warn user about remove of entry and allow cancellation
</pending>
</xml>
